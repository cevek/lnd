{"version":3,"file":"static/chunks/pages/_error-9e327ad2a84cbb55b31b.js","mappings":"yOAIaA,EAAsB,SAC/BC,GAGA,OADeA,EAAOC,MAAM,KAAK,IAIxBC,EAAwB,SAACF,GAClC,IAAMG,EAASJ,EAAoBC,GAEnC,OADiBI,EAAAA,GAAsBD,I,2lBCI3C,IAAME,EAAQ,SAAC,GAKJ,QAJPC,SAAAA,OAIO,MAJIC,EAAAA,GAAAA,MAIJ,EAHPC,EAGO,EAHPA,MAGO,IAFPC,QAAAA,OAEO,MAFGC,EAAAA,GAAAA,MAEH,EADPC,EACO,EADPA,YAEQC,GAAMC,EAAAA,EAAAA,KAAND,EAEFE,EAAcC,EAAAA,EAAWN,GAASG,EAAG,CACvCH,QAAAA,EACAH,SAAAA,IAGJ,OACI,SAACU,EAAA,EAAD,CACIR,MAAOA,EACPG,YAAaA,EACbM,QAASH,EAHb,UAKI,SAACI,EAAA,EAAD,CAAaT,QAASA,EAASH,SAAUA,OAKrDD,EAAMc,gBAAN,mCAAwB,oGACpBC,EADoB,EACpBA,MACAC,EAFoB,EAEpBA,SACArB,EAHoB,EAGpBA,OAEMsB,EAASF,EAAMG,MAASvB,GAAUE,EAAsBF,GACxDS,EAAUT,GAAUwB,EAAAA,GAAqBzB,EAAoBC,IAN/C,eAQhByB,WAAY,MACZnB,SAAUgB,EACVb,QAAAA,GACGW,GAXa,UAYNM,EAAAA,EAAAA,GAAe,CACrBJ,OAAQA,EACRD,SAAAA,IAdY,4GAAxB,sDAmBA,S,uBC3DKM,OAAOC,SAAWD,OAAOC,UAAY,IAAIC,KAAK,CAC7C,UACA,WACE,OAAO,EAAQ,Y","sources":["webpack://_N_E/../common/utils/parseAsPath.ts","webpack://_N_E/./pages/_error.tsx","webpack://_N_E/?d2f1"],"sourcesContent":["import { NextRouter } from \"next/router\";\n\nimport { CountryCodeToLanguage, CountryRegion } from \"common/constants/enum\";\n\nexport const getRegionFromAsPath = (\n    asPath: NextRouter[\"asPath\"]\n): CountryRegion => {\n    const region = asPath.split(\"/\")[1];\n    return region as CountryRegion;\n};\n\nexport const getLanguageFromAsPath = (asPath: NextRouter[\"asPath\"]) => {\n    const region = getRegionFromAsPath(asPath);\n    const language = CountryCodeToLanguage[region as CountryRegion];\n    return language;\n};\n","import { NextPageContext } from \"next\";\nimport loadNamespaces from \"next-translate/loadNamespaces\";\nimport useTranslation from \"next-translate/useTranslation\";\n\nimport {\n    CountryCodeToVersion,\n    CountryVersion,\n    Language,\n} from \"common/constants/enum\";\nimport { ErrorLayout } from \"common/components/ErrorLayout\";\nimport {\n    getLanguageFromAsPath,\n    getRegionFromAsPath,\n} from \"common/utils/parseAsPath\";\n\nimport { BaseLayout, dictionary } from \"layouts/BaseLayout\";\n\nconst Error = ({\n    language = Language.SPAIN,\n    title,\n    version = CountryVersion.SPAIN,\n    description,\n}: any) => {\n    const { t } = useTranslation();\n\n    const baseContent = dictionary[version](t, {\n        version,\n        language,\n    });\n\n    return (\n        <BaseLayout\n            title={title}\n            description={description}\n            content={baseContent}\n        >\n            <ErrorLayout version={version} language={language} />\n        </BaseLayout>\n    );\n};\n\nError.getInitialProps = async ({\n    query,\n    pathname,\n    asPath,\n}: NextPageContext) => {\n    const locale = query.lang || (asPath && getLanguageFromAsPath(asPath));\n    const version = asPath && CountryCodeToVersion[getRegionFromAsPath(asPath)];\n    return {\n        statusCode: \"404\",\n        language: locale,\n        version,\n        ...query,\n        ...(await loadNamespaces({\n            locale: locale as string,\n            pathname,\n        })),\n    };\n};\n\nexport default Error;\n","\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/_error\",\n      function () {\n        return require(\"private-next-pages/_error.tsx\");\n      }\n    ]);\n  "],"names":["getRegionFromAsPath","asPath","split","getLanguageFromAsPath","region","CountryCodeToLanguage","Error","language","Language","title","version","CountryVersion","description","t","useTranslation","baseContent","dictionary","BaseLayout","content","ErrorLayout","getInitialProps","query","pathname","locale","lang","CountryCodeToVersion","statusCode","loadNamespaces","window","__NEXT_P","push"],"sourceRoot":""}